'use strict';

const fs = require('fs');
const path = require('path');
const Transformer = require('webidl2js');

const allProperties = require('../lib/allProperties.js');
const allExtraProperties = require('../lib/allExtraProperties.js');
const { cssPropertyToIDLAttribute } = require('../lib/parsers.js');

const srcDir = path.resolve(__dirname, '../src');
const implDir = path.resolve(__dirname, '../lib');
const outputDir = implDir;

const propertyNames = [
  ...allProperties,
  ...Array.from(allExtraProperties).filter(prop => {
    return !allProperties.has(prop);
  }),
].sort();

// TODO: This should be natively supported by WebIDL2JS's Transformer
// https://github.com/jsdom/webidl2js/issues/188
const genIDL = fs.createWriteStream(
  path.resolve(__dirname, '../src/CSSStyleDeclaration-properties.webidl'),
  {
    encoding: 'utf-8',
  }
);

{
  genIDL.write(`\
// autogenerated by scripts/convert-idl.js. do not edit! ${new Date().toISOString()}

partial interface CSSStyleDeclaration {
  // https://drafts.csswg.org/cssom/#dom-cssstyledeclaration-camel_cased_attribute
`);

  for (const property of propertyNames) {
    const camelCasedAttribute = cssPropertyToIDLAttribute(property);
    genIDL.write(`\
  [CEReactions] attribute [LegacyNullToEmptyString] CSSOMString _${camelCasedAttribute};
`);
  }

  genIDL.write(`
  // https://drafts.csswg.org/cssom/#dom-cssstyledeclaration-webkit_cased_attribute
`);

  for (const property of propertyNames) {
    if (!property.startsWith('-webkit-')) continue;
    const webkitCasedAttribute = cssPropertyToIDLAttribute(property, /* lowercaseFirst = */ true);
    genIDL.write(`\
  [CEReactions] attribute [LegacyNullToEmptyString] CSSOMString _${webkitCasedAttribute};
`);
  }

  genIDL.write(`
  // https://drafts.csswg.org/cssom/#dom-cssstyledeclaration-dashed_attribute
`);

  for (const property of propertyNames) {
    if (!property.includes('-')) continue;
    genIDL.write(`\
  [CEReactions] attribute [LegacyNullToEmptyString] CSSOMString ${property};
`);
  }

  genIDL.end('};\n');
}

const transformer = new Transformer({
  implSuffix: '-impl',
  // TODO: Add support for `[CEReactions]`
});

transformer.addSource(srcDir, implDir);
new Promise(resolve => genIDL.on('finish', resolve))
  .then(() => transformer.generate(outputDir))
  .catch(err => {
    console.error(err.stack);
    process.exit(1);
  });
